#include<stdio.h>
#include<stdlib.h>
struct node{
        int data,size;
        struct node* prev;
        struct node* next;
        };

struct node* createnode(int data){
        struct node* newnode=(struct node*)malloc(sizeof(struct node));
        newnode ->data=data;
        newnode ->prev=NULL;
        newnode ->next=NULL;
        return newnode;
        }

void insertatfront(struct node** head,int data){
        struct node* newnode = createnode(data);
        newnode -> next = *head;
        if(*head !=NULL)
                (*head) ->prev =newnode;
        *head = newnode;
        }
void insertatend(struct node** head,int data){
        struct node* newnode = createnode(data);
        if(*head == NULL){
                *head = newnode;
                return;
        }
        struct node* temp = *head;
        while (temp -> next != NULL)
                temp = temp -> next;
        temp -> next = newnode;
        newnode -> prev = temp;
        }

void insertafterposition(struct node** head, int data, int position){
        int i;
        if(*head == NULL || position<1){
                printf("position out of range\n");
                return;
                }
        struct node*temp = *head;
        for(i=1;i<position && temp !=NULL;i++)
                temp=temp->next;
        if(temp == NULL){
   printf("!!!position out of range!!!\n");
                return;
                }
        struct node* newnode = createnode(data);
        newnode->next=temp->next;
        if(temp->next !=NULL)
                temp->next->prev = newnode;
        temp->next = newnode;
        newnode->prev=temp;
        }

void deleteatbeginning(struct node** head){
        if(*head == NULL){
                printf("List is Empty\n");
                return;
                }
        struct node* temp = *head;
        *head = (*head)->next;
        if(*head !=NULL){
                (*head)->prev = NULL;
                }
        }
void deleteatend(struct node** head){
        if(*head == NULL){
                printf("List is empty\n");
                return;
                }
        struct node* temp = *head;
        while(temp->next != NULL){
                temp = temp->next;
                }
        if(temp->prev != NULL){
                temp->prev->next = NULL;
        }
        else{
                *head = NULL;
                free(temp);
        }
}

void deleteatposition(struct node** head,int position){
        int i;
        if(*head == NULL || position<1){
                printf("position out of range");
                return;
                }
        struct node* temp = *head;
        for(i=1;i<position && temp !=NULL;i++){
                temp = temp ->next;
        if(temp == NULL){
                printf("position is out of range");
                return;
                }
        if(temp->prev!=NULL){
                temp->prev->next=temp->next;
                }
        else{
                *head = temp->next;
        }
        if(temp->next != NULL){
                temp->next->prev = temp->prev;
                free(temp);
                }
        }
}

void displaylist(struct node* head){
        struct node*temp = head;
       while(temp != NULL){
                printf("%d",temp->data);
                temp = temp->next;
                }
        printf("\n");
}

int main(){
        struct node* head = NULL;
        int choice, data, position;
        while(1){
                printf("\n DOUBLY LINKED OPERATIONS: \n");
                printf("1. INSERT AT FRONT\n");
                printf("2. INSERT AT END\n");
                printf("3. INSERT AFTER POSITION\n");
                printf("4. DELETE AT BEGINNING\n");
                printf("5. DELETE AT END\n");
                printf("6. DELETE AT POSITION\n");
                printf("7. DISPLAY LIST\n");
                printf("8. EXIT\n");
                printf("Enter Your Choice: ");
                scanf("%d",&choice);
       switch(choice){
                case 1:
                        printf("enter data to insert at the beginning: ");
                        scanf("%d",&data);
                        insertatfront(&head,data);
                        break;
                case 2:
                        printf("enter data to insert at the end: ");
                        scanf("%d",&data);
                        insertatend(&head, data);
                        break;
                case 3:
                        printf("enter position to insert data: ");
                        scanf("%d", &position);
                        printf("enter data to insert: ");
                        scanf("%d", &data);
                        insertafterposition(&head, position, data);
                        break;
                case 4:
                        deleteatbeginning(&head);
                        break;
                case 5:
                        deleteatend(&head);
     break;
                case 6:
                        printf("enter position of node to delete: ");
                        scanf("%d",&position);
                        deleteatposition(&head, position);
                        break;
                case 7:
                        printf("Doubly Linked List: ");
                        displaylist(head);
                        break;
                case 8:
                        printf("exit");
                        return 0;
                default:
                        printf("INVALID CHOICE");
                }}}
                                                              
